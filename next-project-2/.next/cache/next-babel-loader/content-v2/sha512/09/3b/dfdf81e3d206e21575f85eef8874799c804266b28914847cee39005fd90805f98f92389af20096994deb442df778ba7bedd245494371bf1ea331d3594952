{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\omrub\\\\Desktop\\\\Next.js\\\\React-Learning\\\\next-project-2\\\\pages\\\\[meetupId]\\\\index.js\";\nimport { Fragment } from 'react';\nimport { MongoClient } from 'mongodb';\nimport MeetupDetails from '../../components/meetups/MeetupDetail';\n\nconst MeetupDetailsPage = props => {\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(MeetupDetails, {\n      image: props.meetupData.image,\n      title: props.meetupData.title,\n      address: props.meetmeetupDataps.address,\n      description: props.meetupData.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 9\n  }, this);\n}; //Specify dynamic routes to pre-render pages based on data.\n\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect(\"mongodb+srv://webRubik:test'OR'a'='a'@web-db.qjovo.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetups = await meetupsCollection.find({\n    /*filtter*/\n  }, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    paths: meetups.map(meetups => ({\n      params: {\n        meetupId: meetups._id.toString()\n      }\n    }))\n    /* \r\n    1] If you set fall back to false, you say that your paths contains all supported meetup ID values.\r\n    That means that if the user enters anything that's not supported here, for example, M3\r\n    he or she would see a 404 error.\r\n    \r\n    2]If you set fall back to true on the other hand, NextJS would try to generate a page\r\n    for this meetup ID dynamically on the server for the incoming request.\r\n      3]Fall back is a nice feature because it allows you to pre-generate \r\n    some of your pages for specific meetup ID values.\r\n    */\n\n  };\n}\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId; // fetch data for a single meetup\n\n  const client = await MongoClient.connect(\"mongodb+srv://webRubik:test'OR'a'='a'@web-db.qjovo.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const selectMeetup = meetupsCollection.findOne({\n    _id: meetupId\n  });\n  client.close();\n  console.log(meetupId);\n  return {\n    props: {\n      meetupData: selectMeetup\n    }\n  };\n}\nexport default MeetupDetailsPage;","map":{"version":3,"sources":["C:/Users/omrub/Desktop/Next.js/React-Learning/next-project-2/pages/[meetupId]/index.js"],"names":["Fragment","MongoClient","MeetupDetails","MeetupDetailsPage","props","meetupData","image","title","meetmeetupDataps","address","description","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","params","meetupId","toString","getStaticProps","context","selectMeetup","findOne","console","log"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,WAAT,QAA4B,SAA5B;AAEA,OAAOC,aAAP,MAA0B,uCAA1B;;AACA,MAAMC,iBAAiB,GAAIC,KAAD,IAAW;AACjC,sBACI,QAAC,QAAD;AAAA,2BAEI,QAAC,aAAD;AACI,MAAA,KAAK,EAAEA,KAAK,CAACC,UAAN,CAAiBC,KAD5B;AAEI,MAAA,KAAK,EAAEF,KAAK,CAACC,UAAN,CAAiBE,KAF5B;AAGI,MAAA,OAAO,EAAEH,KAAK,CAACI,gBAAN,CAAuBC,OAHpC;AAII,MAAA,WAAW,EAAEL,KAAK,CAACC,UAAN,CAAiBK;AAJlC;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH,CAZD,C,CAeA;;;AACA,OAAO,eAAeC,cAAf,GAA+B;AAClC,QAAMC,MAAM,GAAG,MAAMX,WAAW,CAACY,OAAZ,CAAoB,oGAApB,CAArB;AACA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AACA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB;AAAC;AAAD,GAAvB,EAAuC;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAAvC,EAAmDC,OAAnD,EAAtB;AACAR,EAAAA,MAAM,CAACS,KAAP;AACA,SAAO;AAEHC,IAAAA,QAAQ,EAAE,KAFP;AAGHC,IAAAA,KAAK,EAAEN,OAAO,CAACO,GAAR,CAAaP,OAAD,KAAc;AAC7BQ,MAAAA,MAAM,EAAE;AAAEC,QAAAA,QAAQ,EAAET,OAAO,CAACE,GAAR,CAAYQ,QAAZ;AAAZ;AADqB,KAAd,CAAZ;AAGP;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAfW,GAAP;AAmBH;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAE1C,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC,CAF0C,CAG1C;;AACA,QAAMd,MAAM,GAAG,MAAMX,WAAW,CAACY,OAAZ,CAAoB,oGAApB,CAArB;AACA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AACA,QAAMc,YAAY,GAAGf,iBAAiB,CAACgB,OAAlB,CAA0B;AAACZ,IAAAA,GAAG,EAACO;AAAL,GAA1B,CAArB;AACAd,EAAAA,MAAM,CAACS,KAAP;AAEAW,EAAAA,OAAO,CAACC,GAAR,CAAYP,QAAZ;AACA,SAAO;AACHtB,IAAAA,KAAK,EAAE;AACJC,MAAAA,UAAU,EAAGyB;AADT;AADJ,GAAP;AAMH;AAED,eAAe3B,iBAAf","sourcesContent":["import { Fragment } from 'react';\r\nimport { MongoClient } from 'mongodb';\r\n\r\nimport MeetupDetails from '../../components/meetups/MeetupDetail'\r\nconst MeetupDetailsPage = (props) => {\r\n    return (\r\n        <Fragment>\r\n            {/* <img src=\"https://c4.wallpaperflare.com/wallpaper/382/472/58/night-the-city-lights-spring-wallpaper-preview.jpg\" alt=\"...\"/> */}\r\n            <MeetupDetails\r\n                image={props.meetupData.image}\r\n                title={props.meetupData.title}\r\n                address={props.meetmeetupDataps.address}\r\n                description={props.meetupData.description}\r\n            />\r\n        </Fragment>\r\n    )\r\n};\r\n\r\n\r\n//Specify dynamic routes to pre-render pages based on data.\r\nexport async function getStaticPaths(){\r\n    const client = await MongoClient.connect(\"mongodb+srv://webRubik:test'OR'a'='a'@web-db.qjovo.mongodb.net/meetups?retryWrites=true&w=majority\");\r\n    const db = client.db();\r\n    const meetupsCollection = db.collection('meetups');\r\n    const meetups = await meetupsCollection.find({/*filtter*/ }, { _id: 1 }).toArray();\r\n    client.close();\r\n    return {\r\n\r\n        fallback: false,\r\n        paths: meetups.map((meetups) => ({\r\n            params: { meetupId: meetups._id.toString() },\r\n        }))\r\n        /* \r\n        1] If you set fall back to false, you say that your paths contains all supported meetup ID values.\r\n        That means that if the user enters anything that's not supported here, for example, M3\r\n        he or she would see a 404 error.\r\n        \r\n        2]If you set fall back to true on the other hand, NextJS would try to generate a page\r\n        for this meetup ID dynamically on the server for the incoming request.\r\n\r\n        3]Fall back is a nice feature because it allows you to pre-generate \r\n        some of your pages for specific meetup ID values.\r\n        */\r\n\r\n    }\r\n}\r\n\r\nexport async function getStaticProps(context) {\r\n    \r\n    const meetupId = context.params.meetupId;\r\n    // fetch data for a single meetup\r\n    const client = await MongoClient.connect(\"mongodb+srv://webRubik:test'OR'a'='a'@web-db.qjovo.mongodb.net/meetups?retryWrites=true&w=majority\");\r\n    const db = client.db();\r\n    const meetupsCollection = db.collection('meetups');\r\n    const selectMeetup = meetupsCollection.findOne({_id:meetupId})\r\n    client.close();\r\n\r\n    console.log(meetupId);\r\n    return {\r\n        props: {\r\n           meetupData : selectMeetup,\r\n\r\n        }\r\n    }\r\n}\r\n\r\nexport default MeetupDetailsPage;"]},"metadata":{},"sourceType":"module"}